// <auto-generated />
using System;
using Messenger_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Messenger_API.Migrations.MessagesDB
{
    [DbContext(typeof(MessageContext))]
    [Migration("20201107175658_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Messenger_API.Models.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Messenger_API.Models.Friend", b =>
                {
                    b.Property<int>("FriendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FriendId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Messenger_API.Models.FriendName", b =>
                {
                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FriendId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FriendNames");
                });

            modelBuilder.Entity("Messenger_API.Models.MessageContent", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageContents");
                });

            modelBuilder.Entity("Messenger_API.Models.Packet", b =>
                {
                    b.Property<int>("PacketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<int>("PacketNumber")
                        .HasColumnType("int");

                    b.HasKey("PacketId");

                    b.HasIndex("ConversationId");

                    b.ToTable("Packets");
                });

            modelBuilder.Entity("Messenger_API.Models.PacketContent", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("PacketId")
                        .HasColumnType("int");

                    b.HasKey("MessageId");

                    b.HasIndex("PacketId");

                    b.ToTable("PacketContents");
                });

            modelBuilder.Entity("Messenger_API.Models.SmallUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("SmallUsers");
                });

            modelBuilder.Entity("Messenger_API.Models.Conversation", b =>
                {
                    b.HasOne("Messenger_API.Models.SmallUser", "SmallUser")
                        .WithMany("Conversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Messenger_API.Models.FriendName", b =>
                {
                    b.HasOne("Messenger_API.Models.Friend", "Friend")
                        .WithMany("FriendNames")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Messenger_API.Models.SmallUser", "SmallUser")
                        .WithMany("FriendNames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Messenger_API.Models.MessageContent", b =>
                {
                    b.HasOne("Messenger_API.Models.SmallUser", "SmallUser")
                        .WithMany("MessageContents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Messenger_API.Models.Packet", b =>
                {
                    b.HasOne("Messenger_API.Models.Conversation", "Conversation")
                        .WithMany("Packets")
                        .HasForeignKey("ConversationId")
                        .HasPrincipalKey("ConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Messenger_API.Models.PacketContent", b =>
                {
                    b.HasOne("Messenger_API.Models.MessageContent", "MessageContent")
                        .WithOne("PacketContent")
                        .HasForeignKey("Messenger_API.Models.PacketContent", "MessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Messenger_API.Models.Packet", "Packet")
                        .WithMany("PacketContents")
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
